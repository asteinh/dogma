classdef HTMLWriter < dogma.writer.Writer
  %HTMLWRITER

  properties (Access = private)
    toc = [];
    relPath = struct( ...
      'css', '+writer/@HTMLWriter/css/', ...
      'js', '+writer/@HTMLWriter/js/' ...
     );
     baseURL = [];
     writeCode = false;
     dogma_URL = 'https://github.com/asteinh/dogma';
  end

  methods (Access = public)
    function obj = HTMLWriter(outputdir, dogma_)
      %HTMLWRITER Constructor of a HTMLWriter.
      obj@dogma.writer.Writer(outputdir, dogma_);
      obj.baseURL = ['./', outputdir];

      fileID = fopen([obj.paths.output_full, '/README.md'], 'w');
      fprintf(fileID, '%s\n', 'The content of this folder is auto-generated by [dogma](', obj.dogma_URL, ').');
      fclose(fileID);
    end
  end

  methods(Access = protected)
    function init(obj)
      init@dogma.writer.Writer(obj);

      if isempty(obj.settings.writer.HTML.baseURL)
        obj.baseURL = [ obj.paths.output_full, '/' ];
      else
        obj.baseURL = obj.settings.writer.HTML.baseURL;
      end
      obj.writeCode = obj.settings.writer.HTML.writeCode;

      %TODO second time we need a treewalker, there's some redundancy here...
      treewalker = obj.doc.createTreeWalker(obj.rootnode, 1, []);
      current = treewalker.getCurrentNode();  % dogma
      node = current.getFirstChild(); % node
      tabofc = [{'<ul>'}, obj.toc_dive(node, ''), {'</ul>'}];
      obj.toc = tabofc;

      % create static directories
      obj.paths.static = fullfile(obj.paths.output_full, '_static');
      obj.paths.css = fullfile(obj.paths.static, '_css');
      obj.paths.js = fullfile(obj.paths.static, '_js');
      obj.createFolder(obj.paths.static);
      obj.createFolder(obj.paths.css);
      obj.createFolder(obj.paths.js);
      % copy default css
      [~, ~] = copyfile(fullfile(obj.paths.dogma, obj.relPath.css, 'default.css'), fullfile(obj.paths.css, 'default.css'));
      % copy highlight.js
      obj.paths.highlight = fullfile(obj.paths.js, 'highlight');
      [~, ~] = copyfile(fullfile(obj.paths.dogma, obj.relPath.js, 'highlight'), obj.paths.highlight);
      % copy open-iconic
      obj.paths.open_iconic = fullfile(obj.paths.css, 'open-iconic');
      [~, ~] = copyfile(fullfile(obj.paths.dogma, obj.relPath.css, 'open-iconic'), obj.paths.open_iconic);
    end

    function toc = toc_dive(obj, node, toc)
      % Dive into the table of contents
      if ~obj.doFilter(node)
        if any(strcmpi(node.getAttribute('type'), {'Folder', 'Other'}))
          toc = [toc, { ['<li id="', char(node.getAttribute('name_matlab')), '" class="', char(node.getAttribute('type')), '">'], char(node.getAttribute('name')) } ];
        else
          toc = [toc, { ['<li id="', char(node.getAttribute('name_matlab')), '" class="', char(node.getAttribute('type')), '">'], ['<a href="', obj.getURL(node), '">', char(node.getAttribute('name')), '</a>'] } ];
        end
        if node.hasChildNodes()
          toc = [toc, {'<ul>'}];
          children = node.getChildNodes();
          for i = 0:1:(children.getLength()-1)
            if strcmp(char(children.item(i).getNodeName()), 'node')
              toc = obj.toc_dive(children.item(i), toc);
            end
          end
          toc = [toc, {'</ul>'}];
        end
        toc = [toc, {'</li>'}];
      end
    end

    function writePackage(obj, node)
      [dest, html, fullname] = obj.generate_page_basics(node);

      % create folder, open file
      obj.createFolder(dest);
      fileID = fopen([dest, '/index.html'], 'w');
      % write html header
      header = obj.html_header(fullname, 'package', {});
      fprintf(fileID, '%s\n', header{:});
      % write html basics
      fprintf(fileID, '%s\n', html{:});

      % write content
      [packages, classes, enums, functions] = obj.scrobble_package(node);
      packages_list = obj.atomic_html_packages_list(packages);
      fprintf(fileID, '%s\n', packages_list{:});
      classes_list = obj.atomic_html_classes_list(classes);
      fprintf(fileID, '%s\n', classes_list{:});
      functions_list = obj.atomic_html_functions_list(functions);
      fprintf(fileID, '%s\n', functions_list{:});

      % write html footer
      footer = obj.html_footer();
      fprintf(fileID, '%s\n', footer{:});
      fclose(fileID);
    end
    function writeClassFolder(obj, node)
      [dest, html, fullname] = obj.generate_page_basics(node);

      % create folder, open file
      obj.createFolder(dest);
      fileID = fopen([dest, '/index.html'], 'w');
      % write html header
      header = obj.html_header(fullname, 'classfolder', {});
      fprintf(fileID, '%s\n', header{:});
      % write html basics
      fprintf(fileID, '%s\n', html{:});

      % write content
      [packages, classes, enums, functions] = obj.scrobble_package(node);
      packages_list = obj.atomic_html_packages_list(packages);
      fprintf(fileID, '%s\n', packages_list{:});
      classes_list = obj.atomic_html_classes_list(classes);
      fprintf(fileID, '%s\n', classes_list{:});
      functions_list = obj.atomic_html_functions_list(functions);
      fprintf(fileID, '%s\n', functions_list{:});

      % write html footer
      footer = obj.html_footer();
      fprintf(fileID, '%s\n', footer{:});
      fclose(fileID);
    end
    function writeClass(obj, node)
      [dest, html, fullname] = obj.generate_page_basics(node);

      % open file
      fileID = fopen([dest, '.html'], 'w');
      % write html header
      header = obj.html_header(fullname, 'class', {});
      fprintf(fileID, '%s\n', header{:});
      % write html basics
      fprintf(fileID, '%s\n', html{:});

      % get details of class
      [def, superclasses, props, methods] = obj.scrobble_class(node);
      % write classdef line
      classdef_line = obj.atomic_html_classdef(def);
      fprintf(fileID, '%s\n', classdef_line{:});

      % write
      superclasses_line = obj.atomic_html_superclasses(superclasses);
      fprintf(fileID, '%s\n', superclasses_line{:});
      properties_overview = obj.atomic_html_properties_overview(props);
      fprintf(fileID, '%s\n', properties_overview{:});
      functions_overview = obj.atomic_html_functions_overview(node, methods);
      fprintf(fileID, '%s\n', functions_overview{:});

      % write code
      if obj.writeCode
        code = obj.atomic_html_code(node);
        fprintf(fileID, '%s\n', code);
      end

      % write html footer
      footer = obj.html_footer();
      fprintf(fileID, '%s\n', footer{:});
      fclose(fileID);
    end
    function writeFunction(obj, node)
      [dest, html, fullname] = obj.generate_page_basics(node);

      % open file
      fileID = fopen([dest, '.html'], 'w');
      % write html header
      header = obj.html_header(fullname, 'function', {});
      fprintf(fileID, '%s\n', header{:});
      % write html basics
      fprintf(fileID, '%s\n', html{:});

      % write code
      if obj.writeCode
        code = obj.atomic_html_code(node);
        fprintf(fileID, '%s\n', code);
      end

      % write html footer
      footer = obj.html_footer();
      fprintf(fileID, '%s\n', footer{:});
      fclose(fileID);
    end
    function writeScript(obj, node)
      [dest, html, fullname] = obj.generate_page_basics(node);

      % open file
      fileID = fopen([dest, '.html'], 'w');
      % write html header
      header = obj.html_header(fullname, 'script', {});
      fprintf(fileID, '%s\n', header{:});
      % write html basics
      fprintf(fileID, '%s\n', html{:});

      % write code
      if obj.writeCode
        code = obj.atomic_html_code(node);
        fprintf(fileID, '%s\n', code);
      end

      % write html footer
      footer = obj.html_footer();
      fprintf(fileID, '%s\n', footer{:});
      fclose(fileID);
    end
    function writeFolder(obj, node)
      error('Not implemented.');
    end
    function writeOther(obj, node)
      error('Not implemented.');
    end
  end

  %% HTML ENVIRONMENT
  methods(Access = private)
    function txt = html_header(obj, title, contclass, css)
      txt = { ...
              '<!doctype html>', ...
              '<html lang="en">', ...
              '<head>', ...
              '  <meta charset="utf-8">', ...
              ['  <title>', title, '</title>'], ...
              ['  <meta name="description" content="' obj.title '">'], ...
              ['  <meta name="author" content="' obj.author '">'], ...
              ['  <base href="' obj.baseURL '" target="_self">'] ...
            };

      % include default.css
      txt = [ txt, { ['  <link rel="stylesheet" href="', fullfile(obj.baseURL, obj.paths.css(numel(obj.paths.output_full)+1:end), 'default.css'), '">'] }];

      % include icons
      txt = [ txt, { '<link rel="stylesheet" href="', fullfile(obj.baseURL, obj.paths.open_iconic(numel(obj.paths.output_full)+1:end), '/font/css/open-iconic.css'), '">' } ];

      % include further css files if given
      for i = 1:1:numel(css)
        txt = [ txt, {'  <link rel="stylesheet" href="css/styles.css?v=1.0">' }];
      end

      % include highlight.js if enabled
      txt = [ txt, ...
              { ['  <link rel="stylesheet" href="', fullfile(obj.baseURL, obj.paths.highlight(numel(obj.paths.output_full)+1:end), 'styles/default.css'), '">'], ...
                ['  <script src="', fullfile(obj.baseURL, obj.paths.highlight(numel(obj.paths.output_full)+1:end), 'highlight.pack.js'), '"></script>'], ...
                '  <script>hljs.initHighlightingOnLoad();</script>'
              }
            ];

      txt = [ txt, ...
              { '</head>', ...
                '<body id="dogma">', ...
                '<div id="header">', ...
                '  <span class="name">', obj.pkg_name, '</span>' }, ...
                obj.atomic_html_statistics(obj.statistics), ...
              { '</div>', ...
                '<div class="flex-row-container">', ...
                '  <div id="toc"><span class="title">Table of contents</span>' }, ...
                obj.toc, ...
              { '  </div>', ...
                ['  <div id="content" class="', contclass, '">'] ...
              }
            ];
    end
    function txt = html_footer(obj)
      txt = { ...
              '  </div>', ...
              '</div>', ...
              '<div id="footer">&copy;' char(datetime('now','Format','y')) '&ndash; generated by <a href="' obj.dogma_URL '">dogma</a></div>', ...
              '</body>', ...
              '</html>' ...
            };
    end
  end

  %% ATOMIC OPERATIONS FOR HTML
  methods(Access = private)
    function html = atomic_html_title(obj, node)
      html = ['<h1>', char(node.getAttribute('name')), '</h1>'];
    end
    function html = atomic_html_subtitle(obj, node)
      html = '<h4 class="directory">';
      if strcmp(char(node.getAttribute('type')), 'ClassFolder')
        html = [html, ['Class folder containing ', char(node.getAttribute('name')), ' class']];
      elseif strcmp(char(node.getAttribute('type')), 'Package')
        html = [html, ['Package ', char(node.getAttribute('name_matlab'))]];
      else
        html = [html, char(node.getAttribute('name_matlab'))];
      end
      html = [html, '</h4>'];
    end
    function html = atomic_html_short(obj, node)
      nextshort = obj.getNextDirectChildByTag(node, 'short');
      if ~isempty(nextshort)
        html = ['<h3 class="short">', char(nextshort.getTextContent()), '</h3>'];
      else
        html = '<p class="error">No direct child "short" found.</p>';
      end
    end
    function html = atomic_html_long(obj, node)
      nextlong = obj.getNextDirectChildByTag(node, 'long');
      if ~isempty(nextlong)
        html = ['<pre class="long">', char(nextlong.getTextContent()), '</pre>'];
      else
        html = '<p class="error">No direct child "long" found.</p>';
      end
    end
    function html = atomic_html_content(obj, node)
      nextcont = obj.getNextDirectChildByTag(node, 'content');
      if ~isempty(nextcont)
        txt = char(nextcont.getTextContent());
        % txt = regexprep(txt, '\t', '&nbsp;&nbsp;'); % replace tabs by two whitespaces
        % txt = regexprep(txt, ' ', '&nbsp;');  % replace whitespace
        % txt = regexprep(txt,'[\n\r]+','\n<br />');
        html = ['<pre class="content">', txt, '</pre>'];
      else
        html = '<p class="error">No direct child "content" found.</p>';
      end
    end
    function html = atomic_html_code(obj, node)
      fid = fopen(char(node.getAttribute('directory')),'r');
      tmp = {};
      while ~feof(fid)
        txt = fgetl(fid);
        if isempty(txt)
          txt = '&nbsp;';
        else
          txt = regexprep(txt, '\t', '&nbsp;&nbsp;'); % replace tabs by two whitespaces
          txt = regexprep(txt, ' ', '&nbsp;');  % replace whitespace
        end
        tmp(end+1,1) = { txt };
      end
      fclose(fid);

      %TODO put code into a collapsible environment
      html = ['<p class="code"><pre>'];
      for i = 1:1:size(tmp,1)
        lineno = num2str(i);
        html = [html, '<span class="line"><span class="lineno" id="line', lineno, '">', lineno, '</span><code class="matlab">', tmp{i}, '</code></span>'];
      end
      html = [html, '</pre></p>'];
    end
    function html = atomic_html_statistics(obj, stats)
      html = ['  <span class="statistics">Documentation generated ', datestr(now),' in '];
      if stats.timing > 10
        html = [html, sprintf('approx. %.0f', stats.timing), ' s'];
      else
        html = [html, sprintf('%.0f', stats.timing*1000), ' ms'];
      end
      html = [ html, '.<br />', ...
               'Total: ', num2str(stats.nodes.total), ...
               ', Package: ', num2str(stats.nodes.Package), ...
               ', ClassFolder: ', num2str(stats.nodes.ClassFolder), ...
               ', Class: ', num2str(stats.nodes.Class), ...
               ', Function: ', num2str(stats.nodes.Function), ...
               ', Script: ', num2str(stats.nodes.Script), ...
               ', Folder: ', num2str(stats.nodes.Folder), ...
               ', Other: ', num2str(stats.nodes.Other) ...
             ];
      html = [ html, '</span>'];
    end
    function html = atomic_html_packages_list(obj, packages)
      if numel(packages) > 0
        html = { '<div class="list packages"><p class="title">Packages</p><ul>' };
        for i = 1:1:numel(packages)
          html = [ html, { '<li>', char(packages{i}.getAttribute('name')), '</li>' } ];
        end
        html = [ html, { '</ul></div>'} ];
      else
        html = {};
      end
    end
    function html = atomic_html_classes_list(obj, classes)
      if numel(classes) > 0
        html = { '<div class="list classes"><p class="title">Classes</p><ul>' };
        for i = 1:1:numel(classes)
          html = [ html, { '<li>', char(classes{i}.getAttribute('name')), '</li>' } ];
        end
        html = [ html, { '</ul></div>'} ];
      else
        html = {};
      end
    end
    function html = atomic_html_functions_list(obj, functions)
      if numel(functions) > 0
        html = { '<div class="list functions"><p class="title">Functions</p><ul>' };
        for i = 1:1:numel(functions)
          html = [ html, { ['<li>', char(functions{i}.getAttribute('name')), '</li>' ] } ];
        end
        html = [ html, { '</ul></div>'} ];
      else
        html = {};
      end
    end
    function html = atomic_html_classdef(obj, def)
      html = { ['<h3 class="classdef">', char(def), '</h3>' ] };
    end
    function html = atomic_html_superclasses(obj, superclasses)
      if numel(superclasses) > 0
        html = { '<div class="list superclasses"><p class="title">Superclasses</p><ul>' };
        for i = 1:1:numel(superclasses)
          html = [ html, { ['<li>', char(superclasses{i}.getAttribute('name')), '</li>' ] } ];
        end
        html = [ html, { '</ul></div>'} ];
      else
        html = {};
      end
    end
    function html = atomic_html_properties_overview(obj, props)
      if numel(props) > 0
        html = { '<p class="title">Properties</p><table class="overview properties">' };
        for i = 1:1:numel(props)
          details = {};
          if strcmp(char(props{i}.getAttribute('abstract')), '1')
            details = [details, {'abstract'}];
          end
          if strcmp(char(props{i}.getAttribute('constant')), '1')
            details = [details, {'constant'}];
          end
          if strcmp(char(props{i}.getAttribute('hidden')), '1')
            details = [details, {'hidden'}];
          end
          details = strjoin(details, ', ');

          inherit = char(props{i}.getAttribute('defining_class'));
          if ~isempty(inherit)
            inherit = ['<span class="oi icon-inherited" data-glyph="action-redo" title="inherited from ', inherit,'" aria-hidden="true"></span>'];
          end

          %TODO what to do with long?
          short = char(props{i}.getElementsByTagName('short').item(0).getTextContent());
          % long = char(props{i}.getElementsByTagName('long').item(0).getTextContent());
          html = [ html, { ['<tr><td>', inherit, '</td>' ] } ];
          html = [ html, { ['<td><span class="name">', char(props{i}.getAttribute('name')), '</span><span class="details">', details, '</span><br /><span class="muted">', short, '</span></td></tr>' ] } ];
        end
        html = [ html, { '</table>'} ];
      else
        html = {};
      end
    end
    function html = atomic_html_functions_overview(obj, node, functions)
      if numel(functions) > 0
        html = { '<p class="title">Functions</p><table class="overview functions">' };
        for i = 1:1:numel(functions)
          inputs = functions{i}.getElementsByTagName('input');
          inputs_str = '';
          for k = 0:1:(inputs.getLength()-1)
            if k == 0
              inputs_str = char(inputs.item(k).getTextContent());
            else
              inputs_str = [inputs_str, ', ', char(inputs.item(k).getTextContent())];
            end
          end
          outputs = functions{i}.getElementsByTagName('output');
          outputs_str = '';
          for k = 0:1:(outputs.getLength()-1)
            if k == 0
              outputs_str = char(outputs.item(k).getTextContent());
            else
              outputs_str = [outputs_str, ', ', char(outputs.item(k).getTextContent())];
            end
          end
          if outputs.getLength() > 1
            outputs_str = ['[', outputs_str, ']'];
          end

          has_line_link = true;

          inherit = char(functions{i}.getAttribute('defining_class'));
          if ~isempty(inherit)
            inherit = ['<span class="oi icon-inherited" data-glyph="action-redo" title="inherited from ', inherit,'" aria-hidden="true"></span>'];
            % TODO linenumbers only available for non-inherited methods atm
            has_line_link = false;
          end

          short = char(functions{i}.getElementsByTagName('short').item(0).getTextContent());

          html = [ html, { ['<tr>' ] } ];
          html = [ html, { ['<td>', inherit, '</td>' ] } ];
          html = [ html, { ['<td>', outputs_str, '</td><td>' ] } ];
          if has_line_link && ~strcmpi(char(functions{i}.getAttribute('linenumber')), 'NaN')
            html = [ html, { ['<a class="name" href="', obj.getURL(node), '#line', char(functions{i}.getAttribute('linenumber')), '"><span class="name">', char(functions{i}.getAttribute('name')), '</span></a>' ] } ];
          else
            html = [ html, { ['<span class="name">', char(functions{i}.getAttribute('name')), '</span>' ] } ];
          end
          html = [ html, { [' (', inputs_str, ')<br /><span class="muted">', short, '</span></td></li></tr>' ] } ];
        end
        html = [ html, { '</table>'} ];
      else
        html = {};
      end
    end
  end

  %% HELPERS
  methods (Access = private)
    function URL = getURL(obj, node)
      relpath = obj.getRelativePath(node);
      if strcmp(char(node.getAttribute('type')), 'Package') || strcmp(char(node.getAttribute('type')), 'ClassFolder')
        URL = fullfile(relpath, 'index.html');
      else
        URL = fullfile([relpath, '.html']);
      end
    end
    function relpath = getRelativePath(obj, node)
      name = char(node.getAttribute('name'));
      if strcmpi(node.getParentNode.getNodeName, 'dogma')
        % most top level
        relpath = ['./', name];
      else
        % recursion
        relpath = [obj.getRelativePath(node.getParentNode()), '/', name];
      end
    end

    function res = getNextDirectChildByTag(obj, node, tag)
      dchild = node.getElementsByTagName(tag).item(0);
      if dchild.getParentNode.isSameNode(node);
        res = dchild;
      else
        res = [];
      end
    end

    function [dest, html, name_matlab] = generate_page_basics(obj, node)
      name = char(node.getAttribute('name'));
      name_matlab = char(node.getAttribute('name_matlab'));

      relpath = obj.getRelativePath(node);
      dest = fullfile(obj.paths.output_rel, relpath);

      html = { obj.atomic_html_title(node) };
      html = [ html, { obj.atomic_html_subtitle(node) } ];
      html = [ html, { obj.atomic_html_short(node) } ];
      html = [ html, { obj.atomic_html_long(node) } ];
    end
    function [def, superclasses, props, methods] = scrobble_class(obj, node)
      def = char(node.getElementsByTagName('classdef').item(0).getTextContent());
      superclasses = {};
      chnodes = node.getElementsByTagName('superclass');
      for i = 0:1:(chnodes.getLength-1)
        if chnodes.item(i).getParentNode.isSameNode(node)
          superclasses = [superclasses, { chnodes.item(i) } ];
        end
      end
      props = {};
      chnodes = node.getElementsByTagName('property');
      for i = 0:1:(chnodes.getLength-1)
        if chnodes.item(i).getParentNode.isSameNode(node) && ...
           ~obj.doFilter(chnodes.item(i)) && ...
           ~obj.doIgnore(chnodes.item(i))
          props = [props, { chnodes.item(i) } ];
        end
      end
      methods = {};
      chnodes = node.getElementsByTagName('method');
      for i = 0:1:(chnodes.getLength-1)
        if chnodes.item(i).getParentNode.isSameNode(node) && ...
           ~obj.doFilter(chnodes.item(i)) && ...
           ~obj.doIgnore(chnodes.item(i))
          methods = [methods, { chnodes.item(i) } ];
        end
      end
    end
    function [packages, classes, enums, functions] = scrobble_package(obj, node)
      packages = {};
      classes = {};
      enums = {};
      functions = {};
      chnodes = node.getElementsByTagName('node');
      for i = 0:1:(chnodes.getLength-1)
        if chnodes.item(i).getParentNode.isSameNode(node)
          if strcmpi(char(chnodes.item(i).getAttribute('type')), 'Package')
            packages = [packages, { chnodes.item(i) } ];
          elseif any(strcmpi(char(chnodes.item(i).getAttribute('type')), {'Class', 'ClassFolder'}))
            classes = [classes, { chnodes.item(i) } ];
          elseif strcmpi(char(chnodes.item(i).getAttribute('type')), 'Function')
            functions = [functions, { chnodes.item(i) } ];
          end
        end
      end
    end
  end
end
